
Асинх Функция ПодключитьКлиента() Экспорт
	
	Попытка
		Результат = Ждать wsПодключитьКлиента();  
		Если Результат Тогда
			WebSocketСервер.УстановитьПараметрСеанса("WebSocketsДрайверЗагружен", Истина);
		КонецЕсли;
	Исключение
		Результат = Ложь; 
		WebSocketСервер.УстановитьПараметрСеанса("WebSocketsДрайверЗагружен", Ложь);			
		#Если НЕ ВебКлиент И НЕ ТонкийКлиент Тогда	
			Описание = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("WebSocketService", УровеньЖурналаРегистрации.Ошибка, ,, Описание);
 		#КонецЕсли
	КонецПопытки;

 
	Возврат Результат;
	
КонецФункции

Функция ЭтоЛинкус()
 	Инф = Новый СистемнаяИнформация();
	Возврат Инф.ТипПлатформы = ТипПлатформы.Linux_x86_64;
КонецФункции

Асинх Функция wsПодключитьКлиента()
	
#Если НЕ ВебКлиент ТОгда
	
	Местоположение = WebSocketСервер.ПолучитьМестоположение(ЭтоЛинкус());
		 
	Файл = Новый Файл(Местоположение);
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение "Файл компоненты не найден!"
	КонецЕсли;

	Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		Результат = Ждать ПодключитьВнешнююКомпонентуАсинх(Местоположение, "arc", ТипВнешнейКомпоненты.Native);
	Иначе  
		//УстановитьВнешнююКомпоненту(Местоположение);
		Результат = ПодключитьВнешнююКомпоненту(Местоположение, "arc", ТипВнешнейКомпоненты.Native);
	КонецЕсли;
			
	Если Результат ТОгда 	
		wsКлиент = Новый ("AddIn.arc." + WebSocketСервер.ПолучитьИдентификаторОбъекта()); //("AddIn.arc.WebSocketClient");	 
		wsКлиент = Неопределено;
		Описание = "Внешняя компонента успешно подключена!"; 

		WebSocketСервер.ЗаписатьВЖурнал(Описание);
		 
		WebSocketСервер.УстановитьПараметрСеанса("WebSocketsДрайверЗагружен", Истина);
	Иначе   
		WebSocketСервер.УстановитьПараметрСеанса("WebSocketsДрайверЗагружен", Ложь);
		ВызватьИсключение "Ошибка подключения внешней компоненты!";
	КонецЕсли;
#Иначе
	Возврат Ложь;
#КонецЕсли

	Возврат Истина;
	
КонецФункции

Функция ПолучитьОбъект() Экспорт
	Результат = Неопределено;
	Попытка
		Результат =  Новый ("AddIn.arc." + WebSocketСервер.ПолучитьИдентификаторОбъекта());
	Исключение
		
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция Base64ВСтроку(Base64) Экспорт
	
	Текст = "";
	
	ДвоичныеДанные = Base64Значение(Base64);
	Если ДвоичныеДанные = Неопределено Тогда
		Текст = Base64;
	Иначе
		Текст = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьПолныйИдентификаторОбъекта() Экспорт
	Возврат "AddIn.arc." + WebSocketСервер.ПолучитьИдентификаторОбъекта();
КонецФункции


Асинх Функция СтартоватьСервис(ОткрытьСокет = Ложь, ВыбПользователь = Неопределено, ВыбПароль = Неопределено, ВыбИдентификатор = Неопределено) Экспорт 
	
	Если ВебСокетКлиент <> Неопределено ТОгда
		ВебСокетКлиент.Закрыть();
		ВебСокетКлиент = Неопределено; 
	КонецЕсли;
	
	Попытка
		ВебСокетКлиент = ПолучитьОбъект();
		Если ВебСокетКлиент <> Неопределено ТОгда
			Если ОткрытьСокет Тогда
				ОткрытьВебСокет(ВыбПользователь, ВыбПароль, ВыбИдентификатор);   
			КонецЕсли;   
		Иначе
			WebSocketСервер.УстановитьПараметрСеанса("WebSocketsДрайверЗагружен", Ложь);
		КонецЕсли;
	Исключение
		Возврат	Ложь;
	КонецПопытки;	
	
	Возврат ВебСокетКлиент <> Неопределено;	
	
КонецФункции

Процедура ОткрытьВебСокет(ВыбПользователь = Неопределено, ВыбПароль = Неопределено, ВыбИдентификатор = Неопределено) Экспорт 
	
	Имя = "";
	Пароль = "";
	Идентификатор = "";
	
	Если ВебСокетКлиент = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ВебСокетКлиент.КаталогЛогФайлов = "/home/arcady/ws_sockets_src/ws_drv/logs";
	
	Пользователь = Пользователи.ТекущийПользователь();
	ПараметрыПодключения = WebSocketСервер.ПолучитьНастройки();
	ВебСокетКлиент.Сервер = ПараметрыПодключения.Сервер;
	ВебСокетКлиент.Порт = ПараметрыПодключения.Порт;   
	УчетнаяЗапись = ОбщегоНазначения.ПолучитьДанныеУчетнойЗаписи(ВыбПользователь);   
	Если ВыбПароль = Неопределено Тогда
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			Пароль = УчетнаяЗапись.Пароль;
		КонецЕсли;
	Иначе
		Пароль = ВыбПароль;
	КонецЕсли;
	Имя = ?(ВыбПользователь = Неопределено, СокрЛП(Пользователь.Код), ВыбПользователь);
	Идентификатор = ?(ВыбИдентификатор = Неопределено, Строка(WebSocketСервер.ИдетификаторСеанса()), ВыбИдентификатор); 
	ИдентификаторПользователя = ?(ВыбПользователь = Неопределено, УчетнаяЗапись.ИдентификаторПользователя, Строка(Новый УникальныйИдентификатор()));
		
	//set_client_param (команда на сервере) - установка параметров сеанса + авторизация
	//в место pwd на сервер передается хеш (ИмяПользователя + Пароль) с ключем hash
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("uuid", Идентификатор);
	СтруктураПараметры.Вставить("name", Имя);
	СтруктураПараметры.Вставить("pwd", Пароль);
	СтруктураПараметры.Вставить("app_name", "1cv8");
	СтруктураПараметры.Вставить("user_uuid", ИдентификаторПользователя);  
	
	////не могу понять почему ЗаписатьJSON блокируется в этом месте. Асинхронность?
	//Параметры = РаботаСJSON.ПолучитьТекст(ПоместитьВоВременноеХранилище(СтруктураПараметры));
	Параметры = РаботаСJSON.ПолучитьТекст(ПоместитьВоВременноеХранилище(СтруктураПараметры), Истина);
	
	//КомандаСерверу
	//   -- ИмяКоманды
	//   -- ИдентификторФормы
	//   -- ПараметрыКоманды (сериализованая структура в json)
	ВебСокетКлиент.ОткрытьКак(Параметры);
	//ВебСокетКлиент.КомандаСерверу("set_client_param", арс_РаботаСWebСервисами.ПустаяСсылкаXML(), Параметры);
	
КонецПроцедуры


Функция ПолучитьСписокАктивныхПодключений(ИдентификаторФормы) Экспорт

	Если ВебСокетКлиент <> Неопределено ТОгда		
		ВебСокетКлиент.КомандаСерверу("get_active_users", Строка(ИдентификаторФормы), "");
	КонецЕсли;	  
	
КонецФункции
