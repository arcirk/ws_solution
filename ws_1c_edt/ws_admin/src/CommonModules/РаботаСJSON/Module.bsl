
Функция ПустаяСсылка() Экспорт
	Возврат "00000000-0000-0000-0000-000000000000";	
КонецФункции

Функция ПолучитьТекст(Адрес, НеИспользоватьЗаписьJSON = Ложь) Экспорт

	Если ЭтоАдресВременногоХранилища(Адрес) Тогда
		Объект = ПолучитьИзВременногоХранилища(Адрес);
	Иначе
		Объект = Адрес;
	КонецЕсли;
	Результат = "";
	
	Если НЕ НеИспользоватьЗаписьJSON Тогда
		Запись = Новый ("ЗаписьJSON");
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Объект); 
		Результат = Запись.Закрыть();
	Иначе
		Результат = СформироватьСтрокуJSON(Объект);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПрочитатьОтветСервера(ОтветСервера) Экспорт

	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ОтветСервера);
	Результат = ПрочитатьJSON(Чтение);
	Возврат Результат;
			
КонецФункции

Процедура СтруктураВДеревоЗначений(СтрукутраИсточник, Дерево = Неопределено)  Экспорт

	Если  Дерево  = Неопределено Тогда
		Дерево = Новый ДеревоЗначений;
		Дерево.Колонки.Добавить("Ключ"); 
		Дерево.Колонки.Добавить("Значение");
	КонецЕсли;
	Для Каждого Элемент Из СтрукутраИсточник Цикл    
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Ключ = Элемент.Ключ;
		Если ТипЗнч(Элемент.Значение) = Тип("Структура") ИЛИ ТипЗнч(Элемент.Значение) = Тип("Соответствие") Тогда 
			НоваяСтрока.Значение = "Структура"; 
			СтруктураВДеревоЗначений(Элемент.Значение, НоваяСтрока);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") ТОгда
			НоваяСтрока.Значение = "Массив";
			ЗаполнитьМассивВДереве(Элемент.Значение, НоваяСтрока);
		Иначе
			НоваяСтрока.Значение = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМассивВДереве(МассивИсточник, Дерево = Неопределено)
	
	Счетчик = 0;
	Для Каждого ТекЭлемент Из МассивИсточник Цикл
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Ключ = "Элемент" + Формат(Счетчик, "ЧГ=");
		Если ТипЗнч(ТекЭлемент) = Тип("Структура") ИЛИ ТипЗнч(ТекЭлемент) = Тип("Соответствие") Тогда 
			НоваяСтрока.Значение = "Структура"; 
			СтруктураВДеревоЗначений(ТекЭлемент, НоваяСтрока);
		ИначеЕсли ТипЗнч(ТекЭлемент) = Тип("Массив") ТОгда
			НоваяСтрока.Значение = "Массив";
			ЗаполнитьМассивВДереве(ТекЭлемент, НоваяСтрока);
		Иначе
			НоваяСтрока.Значение = ТекЭлемент;
		КонецЕсли;		
	КонецЦикла;

КонецПроцедуры

Функция ДеревоЗначенийВСтруктуру(ИсходноеДерево) Экспорт

	Если ИсходноеДерево.Колонки.Найти("Ключ") = Неопределено ИЛИ ИсходноеДерево.Колонки.Найти("Значение") = Неопределено Тогда
		ВызватьИсключение "Не верная структура колонок дерева!";
	КонецЕсли;
	
	РезультатСтруктура = Неопределено;	
	
	ДеревоЗначенийВJsonДалее(ИсходноеДерево, РезультатСтруктура);
	
	Возврат РезультатСтруктура;
	
КонецФункции

Процедура ДеревоЗначенийВJsonДалее(ИсходноеДерево, РезультатСтруктура)
	
	Если РезультатСтруктура = Неопределено ТОгда
		РезультатСтруктура = Новый Структура;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ИсходноеДерево.Строки Цикл
		
		Если НРег(СокрЛП(ТекСтрока.Значение)) = "структура" Тогда
			Результат = Неопределено;
			ДеревоЗначенийВJsonДалее(ТекСтрока, Результат);
		ИначеЕсли НРег(СокрЛП(ТекСтрока.Значение)) = "Массив" Тогда
			Результат = Неопределено;
			ЗаполнитьМассивВСтруктуре(ТекСтрока, Результат)
		Иначе
			Результат = ТекСтрока.Значение;	
		КонецЕсли;
		
		РезультатСтруктура.Вставить(СокрЛП(ТекСтрока.Ключ), Результат);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМассивВСтруктуре(ИсходноеДерево, РезультатМассив)
	
	Если РезультатМассив = Неопределено Тогда
		РезультатМассив = Новый Массив;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ИсходноеДерево.Строки Цикл
		
		Если НРег(СокрЛП(ТекСтрока.Значение)) = "структура" Тогда
			Результат = Неопределено;
			ДеревоЗначенийВJsonДалее(ТекСтрока, Результат);
		ИначеЕсли НРег(СокрЛП(ТекСтрока.Значение)) = "Массив" Тогда
			Результат = Неопределено;
        Иначе
			Результат = ТекСтрока.Значение;	
		КонецЕсли;
		
		РезультатМассив.Добавить(Результат);

	КонецЦикла;
	

КонецПроцедуры

Функция СформироватьСтрокуJSONИзМассива(Объект)
	СтрокаJSON = "[";
	
	Для каждого Элемент Из Объект Цикл
		Если ТипЗнч(Элемент) = Тип("Строка") Тогда
			СтрокаJSON = СтрокаJSON + """" + Элемент + """";
		ИначеЕсли ТипЗнч(Элемент) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Дата") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент - Дата(1970,1,1,1,0,0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент)) + """";
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ",";
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "]";
КонецФункции

Функция СформироватьСтрокуJSONИзСтруктуры(Объект)
	СтрокаJSON = "{";
	
	Для каждого Элемент Из Объект Цикл
		Если Элемент.Значение = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + """" + Элемент.Ключ + """" + ":";
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			Значение = ЭкранироватьЗаменитьНедопустимыеСимволы(Элемент.Значение);
			СтрокаJSON = СтрокаJSON + """" + Значение + """";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			СтрокаJSON = СтрокаJSON + СтрЗаменить(Строка(Элемент.Значение), Символы.НПП, "");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Булево") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			СтрокаJSON = СтрокаJSON + Формат(Элемент.Значение - Дата(1970,1,1,1,0,0), "ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
			СтрокаJSON = СтрокаJSON + СформироватьСтрокуJSON(Элемент.Значение);
		Иначе
			СтрокаJSON = СтрокаJSON + """" + URLEncode(Строка(Элемент.Значение)) + """";
		КонецЕсли;
		
		СтрокаJSON = СтрокаJSON + ",";
	КонецЦикла;
	
	Если Прав(СтрокаJSON, 1) = "," Тогда
		СтрокаJSON = Лев(СтрокаJSON, СтрДлина(СтрокаJSON)-1);
	КонецЕсли;
	
	Возврат СтрокаJSON + "}";
КонецФункции

Функция СформироватьСтрокуJSON(Объект)
	СтрокаJSON = "";
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("Структура") Тогда
		СтрокаJSON = СформироватьСтрокуJSONИзСтруктуры(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаЗначений") Тогда
		СоставСтруктуры = "";
		Для каждого Колонка Из Объект.Колонки Цикл
			СоставСтруктуры = СоставСтруктуры + ?(ЗначениеЗаполнено(СоставСтруктуры), ",", "") + Колонка.Имя;
		КонецЦикла;
		
		МассивСтрок = Новый Массив;
		Для каждого Строка Из Объект Цикл
			СтруктураКолонок = Новый Структура(СоставСтруктуры);
			ЗаполнитьЗначенияСвойств(СтруктураКолонок, Строка);
			МассивСтрок.Добавить(СтруктураКолонок);
		КонецЦикла;
		
		СтрокаJSON = СформироватьСтрокуJSONИзМассива(МассивСтрок);
	КонецЕсли;

	Возврат СтрокаJSON;
КонецФункции


Функция ЭкранироватьЗаменитьНедопустимыеСимволы(Стр)
	
	Результат = СтрЗаменить(Стр			, "\"	, "\\");
	Результат = СтрЗаменить(Результат	, """"	, "\""");
	Результат = СтрЗаменить(Результат	, "/"	, "\/");
	
	Результат = СтрЗаменить(Результат, Символ(8)	, "\b");
	Результат = СтрЗаменить(Результат, Символы.ПФ	, "\f");
	Результат = СтрЗаменить(Результат, Символы.ПС	, "\n");
	Результат = СтрЗаменить(Результат, Символы.ВК	, "\r");
	Результат = СтрЗаменить(Результат, Символы.ВТаб	, "\t");
	
	Возврат Результат;
	
КонецФункции

Функция URLEncode(стр) Экспорт	
	Длина=СтрДлина(Стр);
	Итог="";
	Для Н=1 По Длина Цикл
		Знак=Сред(Стр,Н,1);
		Код=КодСимвола(Знак);
		
		если ((Знак>="a")и(Знак<="z")) или
			 ((Знак>="A")и(Знак<="Z")) или
			 ((Знак>="0")и(Знак<="9")) тогда
			Итог=Итог+Знак;
		Иначе
			Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(144+Код-КодСимвола("А"),16);
			ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(128+Код-КодСимвола("р"),16);
			ИначеЕсли (Знак="ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(145,16);
			ИначеЕсли (Знак="Ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(129,16);
			Иначе
				Итог=Итог+"%"+ПреобразоватьвСистему(Код,16);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Итог;
КонецФункции


Функция ПреобразоватьвСистему(Число10,система) Экспорт
	Если система > 36 или система < 2 тогда
		Сообщить("Выбранная система исчисления не поддерживается");
		Возврат -1;
	КонецЕсли;
	
	СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	СтрокаСистема = "";
	Пока Число10 > 0 цикл
		РезДеления = Число10/система;
		ЧислоСистема = цел(РезДеления);
		остатокОтДеления = Число10 - система*(ЧислоСистема);
		СтрокаСистема = сред(СтрокаЗначений,остатокОтДеления+1,1)+ СтрокаСистема;
		Число10 = ?(ЧислоСистема=0,0,РезДеления); 
	КонецЦикла;
	
	Нечётное = стрДлина(СтрокаСистема) - цел(стрДлина(СтрокаСистема)/2)*2;
	Если Нечётное тогда
		СтрокаСистема = "0"+СтрокаСистема;
	КонецЕсли;
	
	Возврат СтрокаСистема;
КонецФункции


