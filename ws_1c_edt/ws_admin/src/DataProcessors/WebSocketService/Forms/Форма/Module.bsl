
&НаКлиенте
Перем МассивЛогСтрок;
&НаКлиенте
Перем _ТекущаяСтрока;

&НаКлиенте
Процедура СтартоватьСервис(Команда)
#Если НЕ ВебКлиент Тогда		
	Если ВебСокетКлиент <> Неопределено ТОгда  
		Если ВебСокетКлиент.Запущен() Тогда
			ПредупреждениеАсинх("Сервис уже запущен!");
			Возврат;
		Иначе
			WebSocketКлиент.ОткрытьВебСокет();	   
		КонецЕсли;
	Иначе
		ПредупреждениеАсинх("Драйвер не загружен!");
	КонецЕсли;
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонсоль(Команда)
	Элементы.Консоль.Заголовок = "";
КонецПроцедуры

&НаКлиенте
Процедура РезультатСменыПользователя(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено И ВебСокетКлиент <> Неопределено И ВебСокетКлиент.Запущен() Тогда    
		WebSocketКлиент.СтартоватьСервис(Истина, Результат.Имя, Результат.Пароль, Результат.Идентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЛог(Команда)
	Элементы.ФормаПоказыватьЛог.Пометка = НЕ Элементы.ФормаПоказыватьЛог.Пометка;
	Элементы.ГруппаЛог.Видимость = Элементы.ФормаПоказыватьЛог.Пометка;
КонецПроцедуры



&НаКлиенте
Процедура СменитьПользователя(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПодтверждениеПароляНеТребуется", Истина);
	Если ВебСокетКлиент <> Неопределено Тогда
		ПараметрыФормы.Вставить("Имя", ВебСокетКлиент.ТекущееИмя());
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РезультатСменыПользователя", ЭтотОбъект, ПараметрыФормы);

	ОткрытьФорму("Обработка.WebSocketService.Форма.РегистрацияПользователя", ПараметрыФормы,,,,,ОписаниеОповещения);	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокАктивныхПользователей(Команда)
	WebSocketКлиент.ПолучитьСписокАктивныхПодключений(УникальныйИдентификатор);
КонецПроцедуры


&НаКлиенте
Процедура ОстановитьСервис(Команда)
	Если ВебСокетКлиент <> Неопределено ТОгда  
		Если ВебСокетКлиент.Запущен() Тогда
             ВебСокетКлиент.Закрыть();
		Иначе
			#Если НЕ ВебКлиент Тогда
			ПредупреждениеАсинх("Сервис не запущен!"); 
			#КонецЕсли  
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	Если Элементы.АктивныеПользователи.ТекущаяСтрока <> Неопределено Тогда
		ПараметрыФормы = Новый Структура();
		ТекущаяСтрока = АктивныеПользователи.НайтиПоИдентификатору(Элементы.АктивныеПользователи.ТекущаяСтрока);
		ПараметрыФормы.Вставить("ПолучательИмя", ТекущаяСтрока.name);
		ПараметрыФормы.Вставить("ИдентфикаторСессииПолучателя", ТекущаяСтрока.uuid);
		ПараметрыФормы.Вставить("ПолучательИдентификатор", ТекущаяСтрока.user_uuid);
		ОткрытьФорму("Обработка.WebSocketService.Форма.ФормаЧат", ПараметрыФормы);   
	Иначе
		#Если НЕ ВебКлиент Тогда
		ПредупреждениеАсинх("Выберете пользователя!");
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
		
	Отказ = Истина;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыполнитьКомандуНаСервере", ЭтаФорма);
	ОткрытьФорму("Обработка.WebSocketService.Форма.РегистрацияПользователя",, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуНаСервере(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		//ВебСокетКлиент.ДобавитьПользователя(Результат.Имя, Результат.Пароль, Результат.Представление, Результат.Идентификатор, Результат.Роль);
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("user", Результат.Имя);
		СтруктураПараметры.Вставить("pwd", Результат.Пароль);
		СтруктураПараметры.Вставить("role", Результат.Роль);
		СтруктураПараметры.Вставить("uuid", Результат.Идентификатор); 
		СтруктураПараметры.Вставить("perf", Результат.Представление); 
		
		ТекущаяСтрока = Элементы.ДеревоГрупп.ТекущаяСтрока;
		
		Родитель = ?(ТекущаяСтрока <> Неопределено, ДеревоГрупп.НайтиПоИдентификатору(ТекущаяСтрока).Ref, РаботаСJSON.ПустаяСсылка());
		СтруктураПараметры.Вставить("parent", Родитель);
	
		ПараметрыКоманды = РаботаСJSON.ПолучитьТекст(СтруктураПараметры);
		
		Если ВебСокетКлиент <> Неопределено Тогда
			ВебСокетКлиент.КомандаСерверу("add_user", Строка(УникальныйИдентификатор), ПараметрыКоманды);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиВБазеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;

#Если НЕ ВебКлиент ТОгда		
		
	Если ВебСокетКлиент <> Неопределено И ВебСокетКлиент.Запущен() Тогда 
		
		ТекущаяСтрока = Элементы.ПользователиВБазе.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда
			ПредупреждениеАсинх("Удаление не возможно!");
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = ПользователиВБазе.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если ТекущиеДанные.Ref= "" ИЛИ ТекущиеДанные.Ref = РаботаСJSON.ПустаяСсылка() ТОгда
			ПредупреждениеАсинх("Удаление не возможно!");
			Возврат;
		КонецЕсли;
		
		ОповещениеОВыборе = Новый ОписаниеОповещения("РезультатВопросаУдаления", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные));
		ПоказатьВопрос(ОповещениеОВыборе, "Удалить текущего пользователя из базы?", РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ПредупреждениеАсинх("Удаление не возможно!");
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВопросаУдаления(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ВебСокетКлиент.УдалитьПользователя(ДополнительныеПараметры.ТекущиеДанные.Ref, Строка(УникальныйИдентификатор));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппу(Команда)
	
	Если НЕ ВебСокетКлиент = Неопределено И ВебСокетКлиент.Запущен() Тогда
		ТекущаяСтрока = Элементы.ПользователиВБазе.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = ПользователиВБазе.НайтиПоИдентификатору(ТекущаяСтрока);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Пользователь", ТекущиеДанные.Ref);
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ПриВыбореГруппы", ЭтаФорма, ПараметрыФормы);
			АдресДерева = ПоместитьДеревоВХранилище();
			ОткрытьФорму("Обработка.WebSocketService.Форма.ФормаВыбораГруппы", Новый Структура("ДеревоГрупп", АдресДерева), ЭтаФорма,,,, ОповещениеОЗавершении, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПоместитьДеревоВХранилище()
	мДеревоГрупп = РеквизитФормыВЗначение("ДеревоГрупп", Тип("ДеревоЗначений"));
	Возврат ПоместитьВоВременноеХранилище(мДеревоГрупп, УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ПриВыбореГруппы(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено И ВебСокетКлиент <> Неопределено И ВебСокетКлиент.Запущен() Тогда
		ВебСокетКлиент.УстановитьГруппу(ДополнительныеПараметры.Пользователь, Результат.ИдентификаторГруппы, Строка(УникальныйИдентификатор));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЛог(Данные)
	
	Если НЕ Элементы.ГруппаЛог.Видимость ТОгда
		Возврат;
	КонецЕсли;
	МассивЛогСтрок.Вставить(0, Символы.ПС);	
	МассивЛогСтрок.Вставить(0, ВывестиЛогСервер(Данные));
	МассивЛогСтрок.Вставить(0, ПолучитьЗаголовок());
	
	Элементы.Консоль.Заголовок = Новый ФорматированнаяСтрока(МассивЛогСтрок);

КонецПроцедуры

&НаСервере
Функция ВывестиЛогСервер(Данные)
	Возврат Новый ФорматированнаяСтрока(Данные,, ЦветаСтиля.ЦветТекстаВыделенияПоля);
КонецФункции

&НаСервере
Функция ПолучитьЗаголовок()
	Возврат Новый ФорматированнаяСтрока("ws_client: ", Новый Шрифт(Элементы.Консоль.Шрифт,,, Истина), ЦветаСтиля.ЦветАктивности);
КонецФункции

&НаКлиенте
Асинх Процедура ОтправитьСообщениеВсем(Команда)
#Если НЕ ВебКлиент Тогда
	Если ВебСокетКлиент = Неопределено ИЛИ НЕ ВебСокетКлиент.Запущен() ТОгда
		
		ПредупреждениеАсинх("Сервис не запущен!");
		
	КонецЕсли;
	ТекстСообщения = "";
	Результат = Ждать ВвестиСтрокуАсинх(ТекстСообщения, "Введите сообщение", 0, Истина);                                                  
	//Сообщить
	// -- ТекстСообщения
	// -- ИдентификаторПолучателя (Пустой uuid -> Сообщить всем)
	// -- ИдентификаторФормы
     ВебСокетКлиент.Сообщить(ТекстСообщения, РаботаСJSON.ПустаяСсылка(), Строка(УникальныйИдентификатор));
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПользователей(Команда)
	Если ВебСокетКлиент <> Неопределено И ВебСокетКлиент.Запущен() Тогда
		ВебСокетКлиент.КомандаСерверу("get_users", Строка(УникальныйИдентификатор), "");
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ПользователиВБазеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ИзменитьПользователя(ВыбраннаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ПользователиВБазеПередНачаломИзменения(Элемент, Отказ)
		
	Отказ = Истина;
	
	ИзменитьПользователя(Элементы.ПользователиВБазе.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	МассивЛогСтрок = Новый Массив();
		
	Если ВебСокетКлиент = Неопределено Тогда
		Подключить();
	Иначе
		Если НЕ ВебСокетКлиент.Запущен() Тогда
			Подключить();
		КонецЕсли;
	КонецЕсли;   
	
    ПроверкаАктивностиКлиента();
	
	//ПодключитьОбработчикОжидания("ПроверкаАктивностиКлиента", 10, Ложь);
	
	ЗагрузитьСписокАктивныхПользователей();
	//ОбновитьСписокПользователей(0);

	//ОбновитьСписокГрупп(0);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИерархическийСписок = Истина;
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	Если НЕ WebSocketСервер.ДрайверЗагружен() ТОгда
		Сообщить("Драйвер клиент не загружен!");  
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ДеревоГруппПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено ТОгда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = ДеревоГрупп.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ВебСокетКлиент <> Неопределено И ВебСокетКлиент.Запущен() ТОгда
		СтруктураПараметры = Новый Структура("ИмяГруппы", "Новая группа");
		СтруктураПараметры.Вставить("ЭтоНовый", Истина);
		СтруктураПараметры.Вставить("Родитель", ТекущиеДанные.SecondField);
		СтруктураПараметры.Вставить("ИдентификаторРодителя", ТекущиеДанные.Ref);
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПриИзмененииГруппы", ЭтаФорма);
		ОткрытьФорму("Обработка.WebSocketService.Форма.ФормаГруппы", СтруктураПараметры, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииГруппы(Результат, ДополнительныеПараметры) Экспорт
	Если ВебСокетКлиент <> Неопределено И ВебСокетКлиент.Запущен() ТОгда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Если Результат.ЭтоНовый Тогда
				ВебСокетКлиент.ДобавитьГруппу(Результат.ИмяГруппы, Результат.ПредставлениеГруппы, Результат.ИдентификаторРодителя, Строка(УникальныйИдентификатор));
			Иначе
				ВебСокетКлиент.ИзменитьГруппу(Результат.Идентификатор, Результат.ИмяГруппы, Результат.ПредставлениеГруппы, Результат.ИдентификаторРодителя, Строка(УникальныйИдентификатор));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГруппПередУдалением(Элемент, Отказ)
	#Если НЕ ВебКлиент Тогда
	Отказ = Истина;
		
	Если ВебСокетКлиент = Неопределено ТОгда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВебСокетКлиент.Запущен() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ДеревоГрупп.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено ТОгда
		ТекущиеДанные = ДеревоГрупп.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные.Ref= "" ИЛИ ТекущиеДанные.Ref = РаботаСJSON.ПустаяСсылка() ТОгда
			ПредупреждениеАсинх("Удаление не возможно!");
			Возврат;
		КонецЕсли;			
		ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработкаРезультатаОтветаПриУдаленииГруппы", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные));
		ПоказатьВопрос(ОповещениеОВыборе, "Удалить группу и подчинненные группы?", РежимДиалогаВопрос.ОКОтмена)
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГруппПередНачаломИзменения(Элемент, Отказ)
#Если НЕ ВебКлиент Тогда	
	Отказ = Истина;
	
	ТекущаяСтрока = Элементы.ДеревоГрупп.ТекущаяСтрока;
	ТекущиеДанные = Неопределено;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = ДеревоГрупп.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные.Ref = РаботаСJSON.ПустаяСсылка() Тогда
			ПредупреждениеАсинх("Текущюю группу не изменить!");
			Возврат;
		КонецЕсли;
	Иначе
		ПредупреждениеАсинх("Текущюю группу не изменить!");
		Возврат;
	КонецЕсли;	
	
	Если ВебСокетКлиент <> Неопределено И ВебСокетКлиент.Запущен() ТОгда
		СтруктураПараметры = Новый Структура("ИмяГруппы", ТекущиеДанные.FirstField);
		СтруктураПараметры.Вставить("ЭтоНовый", Ложь);
		СтруктураПараметры.Вставить("Родитель", ТекущиеДанные.ПолучитьРодителя().SecondField);
		СтруктураПараметры.Вставить("ИдентификаторРодителя", ТекущиеДанные.ПолучитьРодителя().Ref);
		СтруктураПараметры.Вставить("Идентификатор", ТекущиеДанные.Ref);
		СтруктураПараметры.Вставить("ПредставлениеГруппы", ТекущиеДанные.SecondField);

		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПриИзмененииГруппы", ЭтаФорма);
		ОткрытьФорму("Обработка.WebSocketService.Форма.ФормаГруппы", СтруктураПараметры, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаОтветаПриУдаленииГруппы(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ВебСокетКлиент.УдалитьГруппу(ДополнительныеПараметры.ТекущиеДанные.Ref, Строка(УникальныйИдентификатор));
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГруппПриАктивизацииСтроки(Элемент)
		
	Если Элементы.ДеревоГрупп.ТекущаяСтрока	 = _ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	_ТекущаяСтрока = Элементы.ДеревоГрупп.ТекущаяСтрока;
		
	Если ИерархическийСписок Тогда
		//ТекущаяСтрока = Элементы.ДеревоГрупп.ТекущаяСтрока;		
		Если _ТекущаяСтрока <> Неопределено Тогда
			ДанныеСтроки = ДеревоГрупп.НайтиПоИдентификатору(_ТекущаяСтрока);
			ВебСокетКлиент.ПолучитьПользователей(ДанныеСтроки.Ref, Строка(УникальныйИдентификатор));
		КонецЕсли;
	Иначе
		ОбновитьСписокПользователей(0);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура РежимПросмотраСписка(Команда)
	ИерархическийСписок = НЕ ИерархическийСписок;
	Элементы.ПользователиВБазеРежимПросмотраСписка.Пометка = НЕ Элементы.ПользователиВБазеРежимПросмотраСписка.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокАктивныхПользователей()
	WebSocketКлиент.ПолучитьСписокАктивныхПодключений(УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Асинх Процедура Подключить()
	
	Результат = Ждать WebSocketКлиент.СтартоватьСервис();
	
	Если НЕ Результат Тогда
		#Если НЕ ВебКлиент Тогда
		ПредупреждениеАсинх("Ошибка подключения к серверу!");
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
		
	Текст = WebSocketКлиент.Base64ВСтроку(Данные); 
//	
//	Консоль = "Log >> " + Текст + Символы.ПС + Консоль;
	
	ВывестиЛог(Текст);
	
	СтруктураСообщения = WebSocketСервер.ПолучитьСтруктуруСообщения(Текст);
	
	Если СтруктураСообщения.Свойство("uuid_form") И 
		СокрЛП(СтруктураСообщения.uuid_form) <> "" И СокрЛП(СтруктураСообщения.uuid_form) <> РаботаСJSON.ПустаяСсылка() И
		Новый УникальныйИдентификатор(СтруктураСообщения.uuid_form) <> УникальныйИдентификатор Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьСообщениеСервера(СтруктураСообщения);

КонецПроцедуры

&НаСервере
Процедура УдалитьИзСписка(ИмяСписка, Идентификатор)
	мТаблица = РеквизитФормыВЗначение(ИмяСписка, Тип("ТаблицаЗначений"));
	ТекСтрока = мТаблица.Найти(СокрЛП(Идентификатор), "uuid");
	Если ТекСтрока <> Неопределено Тогда
		мТаблица.Удалить(ТекСтрока);
	КонецЕсли; 
	ЗначениеВРеквизитФормы(мТаблица, ИмяСписка);
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписок(ИмяСписка, Идентификатор, ДанныеСтроки)
	мТаблица = РеквизитФормыВЗначение(ИмяСписка, Тип("ТаблицаЗначений"));
	ТекСтрока = мТаблица.Найти(СокрЛП(Идентификатор), "uuid");
	Если ТекСтрока = Неопределено Тогда
		НоваяСтрока = мТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
	КонецЕсли; 
	ЗначениеВРеквизитФормы(мТаблица, ИмяСписка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСообщениеСервера(СтруктураСообщения)
	
	Если СтруктураСообщения.result = "error" Тогда
		Сообщить("Ошибка: " + СтруктураСообщения.message, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Команда = СтруктураСообщения.command;
	
	Если Команда = "get_active_users" Тогда 
		Результат = РаботаСJSON.ПрочитатьОтветСервера(СтруктураСообщения.message); 
		ОбновитьСписокАктивныхПодключений(Результат);
		ОбновитьСписокГрупп(0); 
	ИначеЕсли Команда = "set_client_param" Тогда
		мСообщение = СтрРазделить(СтруктураСообщения.message, ":");
		Если мСообщение.Количество() = 3 Тогда
			НовыйКлиент = Новый Структура("uuid,name", СокрЛП(мСообщение[2]), СокрЛП(мСообщение[1]));
			ДобавитьВСписок("АктивныеПользователи", НовыйКлиент.uuid, НовыйКлиент);
		КонецЕсли;
	ИначеЕсли Команда = "client_leave" Тогда
		мСообщение = СтрРазделить(СтруктураСообщения.message, ":");
		Если мСообщение.Количество() = 3 Тогда
			УдалитьИзСписка("АктивныеПользователи", СокрЛП(мСообщение[2]));			 
		КонецЕсли;	
	ИначеЕсли Команда = "get_users" Тогда 
		Результат = РаботаСJSON.ПрочитатьОтветСервера(СтруктураСообщения.message);  
		ОбновитьСписокЗарегистрированныхПользователей(Результат);
	ИначеЕсли Команда = "add_user" Тогда 	
		ОбновитьСписокПользователей(0);
	ИначеЕсли Команда = "update_user" Тогда 	
		ОбновитьСписокПользователей(0);
	ИначеЕсли Команда = "remove_user" Тогда 
		Результат = РаботаСJSON.ПрочитатьОтветСервера(СтруктураСообщения.message);  
		УдалитьПользователя(Результат);
	ИначеЕсли Команда = "set_parent" ТОгда
		_ТекущаяСтрока = Неопределено;
		ДеревоГруппПриАктивизацииСтроки(0);	
	ИначеЕсли Команда = "get_group_list" Тогда 
		Результат = РаботаСJSON.ПрочитатьОтветСервера(СтруктураСообщения.message); 
		ОбновитьДеревоГрупп(Результат);
		Если НЕ ИерархическийСписок ТОгда
			ОбновитьСписокПользователей(0);
		Иначе 
			ТекущаяСтрока = Элементы.ДеревоГрупп.ТекущаяСтрока;
			Если ТекущаяСтрока <> Неопределено ТОгда
				мТекСтрока = ДеревоГрупп.НайтиПоИдентификатору(ТекущаяСтрока);
				Если ТекущаяСтрока <> Неопределено Тогда
					ВебСокетКлиент.ПолучитьПользователей(мТекСтрока.Ref, Строка(УникальныйИдентификатор));
				КонецЕсли;
			Иначе
				ВебСокетКлиент.ПолучитьПользователей(РаботаСJSON.ПустаяСсылка(), Строка(УникальныйИдентификатор));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Команда = "add_group" Тогда
		Результат = РаботаСJSON.ПрочитатьОтветСервера(СтруктураСообщения.message);  
		ДобавитьГруппу(Результат);	
	ИначеЕсли Команда = "edit_group" Тогда;
		Результат = РаботаСJSON.ПрочитатьОтветСервера(СтруктураСообщения.message);  
		ОбновитьСтрокуДерева(Результат);
	ИначеЕсли Команда = "remove_group" ТОгда
		Результат = РаботаСJSON.ПрочитатьОтветСервера(СтруктураСообщения.message); 
		УдалитьСтрокуДерева(Результат);			
	Иначе
		Сообщить( СтруктураСообщения.message);
	КонецЕсли;                          	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокГрупп(Команда)
	Если ВебСокетКлиент <> Неопределено Тогда
		ВебСокетКлиент.ПолучитьСписокГрупп(Строка(УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуДерева(ОтветСервера)
	мДеревоГрупп = РеквизитФормыВЗначение("ДеревоГрупп", Тип("ДеревоЗначений"));
	мСтроки = мДеревоГрупп.Строки.НайтиСтроки(Новый Структура("Ref", ОтветСервера.ref), Истина);
	
	ТекущийРодитель = Неопределено;
	
	Если мСтроки.Количество() > 0 Тогда
		ТекущийРодитель = мСтроки[0].Родитель;
		Если ТекущийРодитель = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Попытка
			мСтроки[0].Родитель.Строки.Удалить(мСтроки[0]);
		Исключение
		    Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
	КонецЕсли;
	ЗначениеВРеквизитФормы(мДеревоГрупп, "ДеревоГрупп");
	//ЭлементыФормы.ДеревоГрупп.ТекущаяСтрока = ТекущийРодитель;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппу(ОтветСервера)
	мДеревоГрупп = РеквизитФормыВЗначение("ДеревоГрупп", Тип("ДеревоЗначений"));
	мСтроки = мДеревоГрупп.Строки.НайтиСтроки(Новый Структура("Ref", ОтветСервера.parent), Истина);
	Если мСтроки.Количество() > 0 Тогда
		НоваяСтрока = мСтроки[0].Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтветСервера);
		//ЭлементыФормы.ДеревоГрупп.ТекущаяСтрока = НоваяСтрока;
	КонецЕсли;
	ЗначениеВРеквизитФормы(мДеревоГрупп, "ДеревоГрупп");
КонецПроцедуры

&НаСервере
Процедура ДобавитьВДерево(ОтветСервера)
	мДеревоГрупп = РеквизитФормыВЗначение("ДеревоГрупп", Тип("ДеревоЗначений"));
	Если ОтветСервера.parent = "" ИЛИ ОтветСервера.parent = РаботаСJSON.ПустаяСсылка() Тогда
		мТекСтрока = мДеревоГрупп.Строки.НайтиСтроки(Новый Структура("FirstField", "root"));
		Если мТекСтрока.Количество() > 0  Тогда
			НоваяСтрока = мТекСтрока[0].Строки.Добавить();;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтветСервера);
		КонецЕсли;
	КонецЕсли;
	ЗначениеВРеквизитФормы(мДеревоГрупп, "ДеревоГрупп");
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуДерева(ОтветСервера) 
	мДеревоГрупп = РеквизитФормыВЗначение("ДеревоГрупп", Тип("ДеревоЗначений"));
	мТекущаяСтрока = мДеревоГрупп.Строки.НайтиСтроки(Новый Структура("Ref", ОтветСервера.Ref), Истина); 
	Если мТекущаяСтрока.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(мТекущаяСтрока[0], ОтветСервера);
	КонецЕсли;
	ЗначениеВРеквизитФормы(мДеревоГрупп, "ДеревоГрупп");		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоГрупп(ОтветСервера)
	ТекущаяСтрока = Элементы.ДеревоГрупп.ТекущаяСтрока;
	//ОбновитьДеревоГруппСервер(ТекущаяСтрока, ОтветСервера)
	ОбновитьДерево(ТекущаяСтрока, ОтветСервера);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДерево(ТекущаяСтрока, ОтветСервера)
	ТекСтрока = Неопределено;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекСтрока = ДеревоГрупп.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	ОбновитьДеревоГруппСервер(ТекСтрока, ОтветСервера);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоГруппСервер(ТекСтрока, ОтветСервера)
	
	//ТекИдентификатор = РаботаСJSON.ПустаяСсылка();
	
	мДеревоГрупп = РеквизитФормыВЗначение("ДеревоГрупп", Тип("ДеревоЗначений"));
	
//	Если ТекСтрока <> Неопределено ТОгда
//		Если мДеревоГрупп.Строки.Количество() > 0 Тогда
//			ТекущаяСтрока = ДеревоГрупп.НайтиПоИдентификатору(ТекСтрока);
//			Если ТекущаяСтрока <> Неопределено ТОгда
//				ТекИдентификатор = ТекущаяСтрока.Ref;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
	
	мДеревоГрупп.Строки.Очистить();
	ВерхнийУзел = мДеревоГрупп.Строки.Добавить();
	ВерхнийУзел.FirstField = "root";
	ВерхнийУзел.SecondField = "Сервер";
	ВерхнийУзел.Ref = РаботаСJSON.ПустаяСсылка();
	
	мТаблицаДанных = Новый ТаблицаЗначений;
	мТаблицаДанных.Колонки.Добавить("FirstField");
	мТаблицаДанных.Колонки.Добавить("SecondField");
	мТаблицаДанных.Колонки.Добавить("Ref");
	мТаблицаДанных.Колонки.Добавить("Parent");
	мТаблицаДанных.Индексы.Добавить("Ref");
	
	Если ТипЗнч(ОтветСервера) = Тип("Массив") ТОгда
		Для Каждого ТекСтрока Из ОтветСервера Цикл
			_НоваяСтрока = мТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(_НоваяСтрока, ТекСтрока);
		КонецЦикла;
		Для Каждого ТекСтрока ИЗ мТаблицаДанных Цикл
			Если ТекСтрока.Parent = "" ИЛИ ТекСтрока.parent = РаботаСJSON.ПустаяСсылка() Тогда
				НоваяСтрока = ВерхнийУзел.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				ЗагрузитьДеревоГрупп(НоваяСтрока, мТаблицаДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
//	мТекущаяСтрока = ДеревоГрупп.Строки.НайтиСтроки(Новый Структура("Ref", ТекИдентификатор), Истина); 
//	Если мТекущаяСтрока.Количество() > 0 Тогда
//		ЭлементыФормы.ДеревоГрупп.ТекущаяСтрока = мТекущаяСтрока[0];
//	КонецЕсли;

	ЗначениеВРеквизитФормы(мДеревоГрупп, "ДеревоГрупп");	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДеревоГрупп(ТекущаяСтрока, ИсходныеДанные)
	
	Если ТекущаяСтрока.Ref = "" Тогда
		Возврат;
	КонецЕсли;
	
	мСтроки = ИсходныеДанные.НайтиСтроки(Новый Структура("Parent", ТекущаяСтрока.Ref));
	Для Каждого ТекСтрока Из мСтроки Цикл
		НоваяСтрока = ТекущаяСтрока.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		ЗагрузитьДеревоГрупп(НоваяСтрока, ИсходныеДанные);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура УдалитьПользователя(ОтветСервера)
	УдалитьПользователяСервер(ОтветСервера.ref)	
КонецПроцедуры

&НаСервере
Процедура УдалитьПользователяСервер(Идентификатор)
	мПользователиВБазе = РеквизитФормыВЗначение("ПользователиВБазе", Тип("ТаблицаЗначений"));
	мТекСтрока = мПользователиВБазе.Найти(Идентификатор, "Ref");
	Если мТекСтрока <> Неопределено ТОгда
		мПользователиВБазе.Удалить(мТекСтрока);
	КонецЕсли;
	ЗначениеВРеквизитФормы(мПользователиВБазе, "ПользователиВБазе");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗарегистрированныхПользователей(ОтветСервера)
	Если ТипЗнч(ОтветСервера) = Тип("Массив") ТОгда
		ПользователиВБазе.Очистить();
		Для Каждого ТекСтрук Из ОтветСервера Цикл
			НоваяСтрока = ПользователиВБазе.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрук);
			НоваяСтрока.Активность = ПолучитьОписаниеАктивности(НоваяСтрока.Ref);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеАктивности(Идентификатор)
	мАктивныеПользователи = РеквизитФормыВЗначение("АктивныеПользователи", Тип("ТаблицаЗначений"));
	Если мАктивныеПользователи.Найти(Идентификатор, "user_uuid") <> Неопределено Тогда
		Возврат "В сети";
	Иначе
		Возврат "Не в сети";
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокАктивныхПодключений(ОтветСервера)
	
	АктивныеПользователи.Очистить();
	
	Для Каждого СтруктураПодключения Из ОтветСервера Цикл
		НоваяСтрока = АктивныеПользователи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПодключения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ОтключитьОбработчикОжидания("ПроверкаАктивностиКлиента");
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаАктивностиКлиента() Экспорт

	Если ВебСокетКлиент <> Неопределено Тогда
		СостояниеПодключения = "" + ВебСокетКлиент.ТекущееИмя() + " : " + ?(ВебСокетКлиент.Запущен(), "Подключен", "Не подключен"); 
		Если НЕ ВебСокетКлиент.Запущен() Тогда
			АктивныеПользователи.Очистить();
			ПользователиВБазе.Очистить();
		КонецЕсли;
	Иначе
		СостояниеПодключения = "" + Пользователи.ТекущийПользователь() + " : Не подключен";   
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПользователя(ВыбранноеЗначение)
	
	Если ВебСокетКлиент = Неопределено ИЛИ НЕ ВебСокетКлиент.Запущен() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ПользователиВБазе.НайтиПоИдентификатору(ВыбранноеЗначение);
	СсылкаНаПользователя = ПолучитьПользователяБазы(ТекущаяСтрока.ref);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПользовательИБ", СсылкаНаПользователя);
	ПараметрыФормы.Вставить("Представление", ТекущаяСтрока.SecondField);
	ПараметрыФормы.Вставить("Имя", ТекущаяСтрока.FirstField);
	ПараметрыФормы.Вставить("Идентификатор", ТекущаяСтрока.ref);
	ПараметрыФормы.Вставить("Роль", ТекущаяСтрока.role);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РезультатИзмененияПользователя", ЭтотОбъект, ПараметрыФормы);

	ОткрытьФорму("Обработка.WebSocketService.Форма.РегистрацияПользователя", ПараметрыФормы,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатИзмененияПользователя(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено И Результат <> КодВозвратаДиалога.Отмена ТОгда
		_Хеш = ВебСокетКлиент.ПолучитьХеш(Результат.Имя, Результат.Пароль);
		 
		ПараметрыЗапроса = ИзменитьПользователяПолучитьПараметрыЗапроса(Результат, _Хеш);
		
		ВебСокетКлиент.КомандаСерверу("update_user", Строка(УникальныйИдентификатор), ПараметрыЗапроса);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПользователяБазы(Идентификатор)
		
	ИдентификаторПользователя = Новый УникальныйИдентификатор(Идентификатор);
	
	Пользователь = Справочники.Пользователи.ПолучитьСсылку(ИдентификаторПользователя);

	Возврат Пользователь;
			  
			      
КонецФункции

&НаСервере
Функция ИзменитьПользователяПолучитьПараметрыЗапроса(Результат, _Хеш)	
	
	ТекущаяСтрока = ПользователиВБазе.НайтиПоИдентификатору(Элементы.ПользователиВБазе.ТекущаяСтрока);
	
	Если ТекущаяСтрока <> Неопределено И Результат <> Неопределено Тогда
		  СтруктураПараметров = Новый Структура;
		  Если Результат.Имя <> ТекущаяСтрока.FirstField ТОгда
			  СтруктураПараметров.Вставить("FirstField", Результат.Имя);
		  КонецЕсли;
		  Если Результат.Представление <> ТекущаяСтрока.SecondField ТОгда
			  СтруктураПараметров.Вставить("SecondField", Результат.Представление);
		  КонецЕсли;
		  Если Результат.Роль <> ТекущаяСтрока.role ТОгда
			  СтруктураПараметров.Вставить("role", Результат.Роль);
		  КонецЕсли;
		  
		  СтруктураПараметров.Вставить("hash", _Хеш);
		  
		  Если СтруктураПараметров.Количество() > 0 Тогда
			  ПараметрыКоманды = Новый Структура();
			  ПараметрыКоманды.Вставить("set", СтруктураПараметров);
			  ПараметрыКоманды.Вставить("where", Новый Структура("Ref", ТекущаяСтрока.ref ));
			  
			  Запись = Новый ЗаписьJSON; 
			  Запись.УстановитьСтроку();
			  ЗаписатьJSON(Запись, ПараметрыКоманды);
			  
			  Возврат Запись.Закрыть();
			  
		  КонецЕсли;
		  
	КонецЕсли;
	
	Возврат "";
	
КонецФункции


&НаКлиенте
Процедура ПолучитьТекущуюДату(Команда)
		
	Если ВебСокетКлиент <> Неопределено Тогда
		Сообщить(ВебСокетКлиент.ТекущаяДата());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТекущаяДатаВСекундах(Команда)
	
	Если ВебСокетКлиент <> Неопределено Тогда
		Сообщить(ВебСокетКлиент.ТекущаяДатаВСекундах());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТекущаяДатаВСекундахВДату(Команда)
		
	Если ВебСокетКлиент <> Неопределено Тогда
		unixtime = ВебСокетКлиент.ТекущаяДатаВСекундах() + ВебСокетКлиент.ПолучитьСмещениеВременнойЗоны();
		Сообщить(Дата(1970,1,1,1,0,0) + unixtime);
	КонецЕсли;

	//unixtime = 1404158409000/1000;
	//Дата1С = Дата(1970,1,1,1,0,0) + unixtime;// 30.06.2014 21:00:09

КонецПроцедуры




