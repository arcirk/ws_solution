
 &НаКлиенте
 Перем wsКлиент;
 
 &НаСервере
 Функция ЭтоРежимОтладки()
 	Возврат Константы.РежимОтладки.Получить()
 КонецФункции
 
 &НаКлиенте
 Функция ЭтоЛинкус()
 	Инф = Новый СистемнаяИнформация();
	Возврат Инф.ТипПлатформы = ТипПлатформы.Linux_x86_64;
 КонецФункции

&НаСервере
Функция ПолучитьМестоположение(_ЭтоЛинкус)

	Если ЭтоРежимОтладки() Тогда
		Разделитель = ?(_ЭтоЛинкус, "/", "\");
		мКаталогОтладки = СтрРазделить(Константы.КаталогОтладки.Получить(), "|");
		КаталогОтладки = ?(_ЭтоЛинкус, мКаталогОтладки[0], мКаталогОтладки[1]);
		мИмяКомпоненты = СтрРазделить(Константы.ИмяВнешнейКомпоненты.Получить(), "|");
		ИмяКомпоненты = ?(_ЭтоЛинкус, мИмяКомпоненты[0], мИмяКомпоненты[1]);
		Возврат КаталогОтладки + Разделитель + ИмяКомпоненты;
	Иначе
		Возврат "ОбщийМакет.ws_client";
	КонецЕсли
	
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторОбъекта()
	Возврат Константы.ИдентификаторОбъекта.Получить();
КонецФункции

&НаКлиенте
Асинх Процедура ПодключитьКлиента(Команда)
	
	Местоположение = ПолучитьМестоположение(ЭтоЛинкус());
		 
	Файл = Новый Файл(Местоположение);
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение "Файл компоненты не найден!"
	КонецЕсли;
		 
	Результат = Ждать ПодключитьВнешнююКомпонентуАсинх(Местоположение, "arc", ТипВнешнейКомпоненты.Native); 	
			
	Если Результат ТОгда 	
		wsКлиент = Новый ("AddIn.arc." + ПолучитьИдентификаторОбъекта()); //("AddIn.arc.WebSocketClient");	
		ПрочитатьСвойстваКомпоненты(); 
		//wsКлиент = Неопределено;
		Сообщить("Внешняя компонента успешно подключена!");
	Иначе
		ВызватьИсключение "Ошибка подключения внешней компоненты!";
	КонецЕсли;

	СостояниеКомпоненты = "Подключена";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//УстановитьВнешнююКомпонентуАсинх("ОбщийМакет.ws_client");
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Объект.ТипПлатформы = СистемнаяИнформация.ТипПлатформы;

	Попытка
		wsКлиент = WebSocketКлиент.ПолучитьОбъект();
	Исключение
	КонецПопытки;
	
	Если wsКлиент = Неопределено Тогда
		СостояниеКомпоненты = "Не подключена";
	Иначе
		СостояниеКомпоненты = "Подключена";
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Сервер = Константы.Сервер.Получить(); 
	Объект.Порт = Константы.Порт.Получить();
	Объект.Имя = "admin";
	
	Элементы.ТекстСообщения.СписокВыбора.Добавить("get_uuid");
	Элементы.ТекстСообщения.СписокВыбора.Добавить("get_channels");
	Элементы.ТекстСообщения.СписокВыбора.Добавить("send_message");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСообщенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекстСообщения = "cmd " + ВыбранноеЗначение;
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Сообщить(ИмяСобытия);
КонецПроцедуры

&НаКлиенте
Функция Base64ВСтроку(Base64) Экспорт
	
	Текст = "";
	
	ДвоичныеДанные = Base64Значение(Base64);
	Если ДвоичныеДанные = Неопределено Тогда
		Текст = Base64;
	Иначе
		Текст = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
//		
//	Консоль = Консоль + "Источник: " + Источник + "
//	|Событие: " + Событие + "
//	|Данные: " + Base64ВСтроку(Данные) + Символы.ПС; 
	 
	Текст = ?(НеДекодировать, Данные, Base64ВСтроку(Данные)); 
	
	Если НЕ НеДекодировать И НЕ ВыводитьПоныйТекстСообщения ТОгда
	
		Текст = ПолучитьСоощение(Текст);
		
	КонецЕсли;
	 
	Консоль = Консоль + Текст + Символы.ПС;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонсоль(Команда)
	Консоль = "";
КонецПроцедуры

&НаСервере
Функция ПолучитьСоощение(Текст)
	Попытка	
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Текст);
		Значение = ПрочитатьJSON(Чтение);
		
		Результат = "";
		
		Если Значение.Свойство("name") Тогда
			Результат = Значение.name + ": 
			|";
		КонецЕсли;
		
		Если Значение.Свойство("message") ТОгда
			Результат = Результат + Значение.message;
		КонецЕсли;
		Возврат Результат;	
	Исключение
		Возврат Текст;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если wsКлиент <> Неопределено ТОгда		
		wsКлиент.Закрыть();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПрочитатьСвойстваКомпоненты()
	
	Если wsКлиент <> Неопределено ТОгда		
		Объект.Порт = wsКлиент.Порт;
		Объект.Сервер = wsКлиент.Сервер;		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СоединениеАктивно(Команда)
	Если wsКлиент <> Неопределено ТОгда
		Сообщить(wsКлиент.Запущен());
	Иначе
		Сообщить(Ложь);			
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Подключить(Команда)
	
	Если wsКлиент = Неопределено ТОгда
		wsКлиент = Новый ("AddIn.arc." + ПолучитьИдентификаторОбъекта());
	КонецЕсли;
	
	Если wsКлиент.Запущен() Тогда
		ВызватьИсключение "Клиент уже запущен!"	
	КонецЕсли;
	
	wsКлиент.Порт = Объект.Порт;
	wsКлиент.Сервер = Объект.Сервер;
	//wsКлиент.Открыть(); //рандомный идентификатор
	wsКлиент.ОткрытьКак(Строка(УникальныйИдентификатор), Объект.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Отключить(Команда)
	Если wsКлиент <> Неопределено ТОгда
		wsКлиент.Закрыть();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если wsКлиент <> Неопределено ТОгда		
		wsКлиент.Сообщить(ТекстСообщения);
		ТекстСообщения = "";
	КонецЕсли;
	
КонецПроцедуры
